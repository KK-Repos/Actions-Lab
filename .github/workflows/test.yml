name: test-NotifyJobStatus

on: 
  workflow_dispatch:
    inputs:
      debug_mode:
        description: '...'
        required: false
        default: 'false'
      # optionInput:
      #   type: choice
      #   description: 'Do you want to run cypress test ?'
      #   default: 'yes'
      #   options:
      #   - Yes
      #   - No
      # unitTestInput:
      #   type: choice
      #   description: 'Do you want to run unit test ?'
      #   options:
      #   - Yes
      #   - No
      # slackInput:
      #   type: choice
      #   description: 'Do you want slack report for cypress run ?'
      #   options:
      #   - Yes
      #   - No


env:
  RUN_ID:  ${{ github.run_id }}
  ORG: KK-Repos
  REPO: Actions-Lab
  GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }}
  JOB_NAME_1: run-cypress-test
  JOB_NAME_2: unit-test-job
  CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  CUSTOM_LINK: true
  NEW_LINK_JOB_NAME: ${{ vars.NEW_LINK_JOB_NAME }}
  OLD_LINK_JOB_NAME: ${{ vars.OLD_LINK_JOB_NAME }}
  ENABLE_FAIL_CASE: true 
  REPO_NAME: KK-Repos
  
jobs:

  unit-test:
    runs-on: ubuntu-latest
    name: unit-test-job
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
      - name: print the ls
        run: ls
      - name: Debugging
        run: |
          ls -R /home/runner/work/Actions-Lab/Actions-Lab
        shell: bash
      - name: Upload Data Artifact
        uses: actions/upload-artifact@v3
        with:
          name: result-artifact
          path: |
            slackReport/results/*.json
            resultData.json
          retention-days: 1
      - name: prunt env
        run: echo ${{ github.event.inputs.choice }} 
      - name: print GITHUB_TOKEN
        run: echo $GITHUB_TOKEN
      - name: run unit test
        run: exit 1
      # - name: Next job
      #   if: failure()
      #   run: |
      #     echo Hello

  run-cypress-test-1:
    needs: unit-test
    name: run-cypress-test (1)
    runs-on: ubuntu-latest
    if: "!cancelled() && github.ref_name == 'master'"
    steps:
      - name: Download Data Artifact
        uses: actions/download-artifact@v3
        with:
          name: result-artifact
          path: result
      - name: Get the failure Stats
        run: |
          FAILURE_STATS=$(jq -r '.failureStats' result/resultData.json)
          echo "FAILURE_STATS=$FAILURE_STATS" >> $GITHUB_ENV
      - name: Print the message
        run: echo $FAILURE_STATS

  # run-cypress-test-2:
  #   name: run-cypress-test (2)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Print the message
  #       run: echo "Hi from run-cypress-test (2)"

  # run-cypress-test-3:
  #   name: run-cypress-test (3)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Print the message
  #       run: |
  #         echo "Hi from run-cypress-test (3)"
  #         exit 0

  # run-cypress-test-4:
  #   name: run-cypress-test (4)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Print the message
  #       run: echo "Hi from run-cypress-test (4)"

  # run-cypress-test-5:
  #   name: run-cypress-test (5)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Print the message
  #       run: echo "Hi from run-cypress-test (5)"

  # run-cypress-test-6:
  #   name: run-cypress-test (6)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Print the message
  #       run: echo "Hi from run-cypress-test (6)"
    
  # test-job:
  #   needs: [run-cypress-test-6]
  #   if: always()
  #   runs-on: ubuntu-latest
  #   name: print Run ID
  #   steps:
  #     - name: Checkout Branch
  #       uses: actions/checkout@v3
  #     - name: Print the current run id
  #       run: echo "PR_NUMBER" $RUN_ID
  #     - name: Get the failure Stats
  #       run: |
  #         FAILURE_STATS=$(jq -r '.failureStats' resultData.json)
  #         echo "FAILURE_STATS=$FAILURE_STATS" >> $GITHUB_ENV
  #     - name: custom actions
  #       id: custom-action
  #       uses: KK-Repos/NotifyJobStatus@v1
  #       with:
  #         ORG: $ORG
  #         REPO: $ORG
  #         RUN_ID: ${{ github.run_id }}
  #         CHANNEL_ID: $CHANNEL_ID
  #         SLACK_BOT_TOKEN: $SLACK_BOT_TOKEN
  #     - name: Use Custom Action Output
  #       run: echo ${{ steps.custom-action.outputs.my_output }}
